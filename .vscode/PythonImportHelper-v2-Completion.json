[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "df1",
        "kind": 5,
        "importPath": ".vscode.Merge",
        "description": ".vscode.Merge",
        "peekOfCode": "df1 = pd.DataFrame({\n    'id': [1, 2, 3, 4],\n    'name': ['Sonam', 'Raj', 'Sonal', 'Rajeev']\n})\ndf2 = pd.DataFrame({\n    'id': [3, 4, 5, 6],\n    'score': [90, 80, 70, 60]\n})\n\"\"\" Inner Join\"\"\" \ninner_join = pd.merge(df1, df2, on='id')",
        "detail": ".vscode.Merge",
        "documentation": {}
    },
    {
        "label": "df2",
        "kind": 5,
        "importPath": ".vscode.Merge",
        "description": ".vscode.Merge",
        "peekOfCode": "df2 = pd.DataFrame({\n    'id': [3, 4, 5, 6],\n    'score': [90, 80, 70, 60]\n})\n\"\"\" Inner Join\"\"\" \ninner_join = pd.merge(df1, df2, on='id')\nprint(\"Inner Join:\\n\", inner_join)\n\"\"\" Left Join\"\"\" \nleft_join = pd.merge(df1, df2, on='id', how='left')\nprint(\"\\nLeft Join:\\n\", left_join)",
        "detail": ".vscode.Merge",
        "documentation": {}
    },
    {
        "label": "inner_join",
        "kind": 5,
        "importPath": ".vscode.Merge",
        "description": ".vscode.Merge",
        "peekOfCode": "inner_join = pd.merge(df1, df2, on='id')\nprint(\"Inner Join:\\n\", inner_join)\n\"\"\" Left Join\"\"\" \nleft_join = pd.merge(df1, df2, on='id', how='left')\nprint(\"\\nLeft Join:\\n\", left_join)\n\"\"\" Right Join\"\"\" \nright_join = pd.merge(df1, df2, on='id', how='right')\nprint(\"\\nRight Join:\\n\", right_join)\n\"\"\" Outer Join\"\"\" \nouter_join = pd.merge(df1, df2, on='id', how='outer')",
        "detail": ".vscode.Merge",
        "documentation": {}
    },
    {
        "label": "left_join",
        "kind": 5,
        "importPath": ".vscode.Merge",
        "description": ".vscode.Merge",
        "peekOfCode": "left_join = pd.merge(df1, df2, on='id', how='left')\nprint(\"\\nLeft Join:\\n\", left_join)\n\"\"\" Right Join\"\"\" \nright_join = pd.merge(df1, df2, on='id', how='right')\nprint(\"\\nRight Join:\\n\", right_join)\n\"\"\" Outer Join\"\"\" \nouter_join = pd.merge(df1, df2, on='id', how='outer')\nprint(\"\\nOuter Join:\\n\", outer_join)\ndf3 = pd.DataFrame({\n    'id': [1, 2, 3, 4],",
        "detail": ".vscode.Merge",
        "documentation": {}
    },
    {
        "label": "right_join",
        "kind": 5,
        "importPath": ".vscode.Merge",
        "description": ".vscode.Merge",
        "peekOfCode": "right_join = pd.merge(df1, df2, on='id', how='right')\nprint(\"\\nRight Join:\\n\", right_join)\n\"\"\" Outer Join\"\"\" \nouter_join = pd.merge(df1, df2, on='id', how='outer')\nprint(\"\\nOuter Join:\\n\", outer_join)\ndf3 = pd.DataFrame({\n    'id': [1, 2, 3, 4],\n    'name': ['Sonam', 'Raj', 'Sonal', 'Rajeev']\n})\ndf4 = pd.DataFrame({",
        "detail": ".vscode.Merge",
        "documentation": {}
    },
    {
        "label": "outer_join",
        "kind": 5,
        "importPath": ".vscode.Merge",
        "description": ".vscode.Merge",
        "peekOfCode": "outer_join = pd.merge(df1, df2, on='id', how='outer')\nprint(\"\\nOuter Join:\\n\", outer_join)\ndf3 = pd.DataFrame({\n    'id': [1, 2, 3, 4],\n    'name': ['Sonam', 'Raj', 'Sonal', 'Rajeev']\n})\ndf4 = pd.DataFrame({\n    'stu_id': [3, 4, 5, 6],\n    'score': [90, 80, 70, 60]\n})",
        "detail": ".vscode.Merge",
        "documentation": {}
    },
    {
        "label": "df3",
        "kind": 5,
        "importPath": ".vscode.Merge",
        "description": ".vscode.Merge",
        "peekOfCode": "df3 = pd.DataFrame({\n    'id': [1, 2, 3, 4],\n    'name': ['Sonam', 'Raj', 'Sonal', 'Rajeev']\n})\ndf4 = pd.DataFrame({\n    'stu_id': [3, 4, 5, 6],\n    'score': [90, 80, 70, 60]\n})\n\"\"\" Inner Join\"\"\" \ninner_join = pd.merge(df3, df4, left_on='id', right_on='stu_id')",
        "detail": ".vscode.Merge",
        "documentation": {}
    },
    {
        "label": "df4",
        "kind": 5,
        "importPath": ".vscode.Merge",
        "description": ".vscode.Merge",
        "peekOfCode": "df4 = pd.DataFrame({\n    'stu_id': [3, 4, 5, 6],\n    'score': [90, 80, 70, 60]\n})\n\"\"\" Inner Join\"\"\" \ninner_join = pd.merge(df3, df4, left_on='id', right_on='stu_id')\nprint(\"Inner Join:\\n\", inner_join)",
        "detail": ".vscode.Merge",
        "documentation": {}
    },
    {
        "label": "inner_join",
        "kind": 5,
        "importPath": ".vscode.Merge",
        "description": ".vscode.Merge",
        "peekOfCode": "inner_join = pd.merge(df3, df4, left_on='id', right_on='stu_id')\nprint(\"Inner Join:\\n\", inner_join)",
        "detail": ".vscode.Merge",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Import_and_Export_File.Import_Export_CSV_File",
        "description": "Import_and_Export_File.Import_Export_CSV_File",
        "peekOfCode": "data = {\n    'name': ['aj', 'shivam', 'mohit', 'mohit'],\n    'city': ['Madhubani', 'Madhubani', 'Mithila', 'Noida'],\n    'age': [28, 24, 24, np.nan],\n}\ndf = pd.DataFrame(data)\n# Writing DataFrame to CSV file\ndf.to_csv('Import_and_Export_File\\sample.csv', index=False)  # Without index\n# Reading the CSV file back into a DataFrame\ndf_read = pd.read_csv('sample.csv')",
        "detail": "Import_and_Export_File.Import_Export_CSV_File",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Import_and_Export_File.Import_Export_CSV_File",
        "description": "Import_and_Export_File.Import_Export_CSV_File",
        "peekOfCode": "df = pd.DataFrame(data)\n# Writing DataFrame to CSV file\ndf.to_csv('Import_and_Export_File\\sample.csv', index=False)  # Without index\n# Reading the CSV file back into a DataFrame\ndf_read = pd.read_csv('sample.csv')\nprint(df_read)",
        "detail": "Import_and_Export_File.Import_Export_CSV_File",
        "documentation": {}
    },
    {
        "label": "df_read",
        "kind": 5,
        "importPath": "Import_and_Export_File.Import_Export_CSV_File",
        "description": "Import_and_Export_File.Import_Export_CSV_File",
        "peekOfCode": "df_read = pd.read_csv('sample.csv')\nprint(df_read)",
        "detail": "Import_and_Export_File.Import_Export_CSV_File",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Column_Deletion",
        "description": "Column_Deletion",
        "peekOfCode": "data = {\n    'name': ['aj', 'shivam', 'mohit', 'mohit'],\n    'age': [28, 24, 35, 32],\n    'roll': [102, 102, 103, 104],\n    'marks':[11, 22, 33, 44],\n    'city':['Madhubani', 'Madhubani', 'Mithila', 'Noida'],\n    'gender':['F', 'M', 'M', 'F']\n}\ndf = pd.DataFrame(data)\n# print(\"Display All Data:\\n\", df)",
        "detail": "Column_Deletion",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Column_Deletion",
        "description": "Column_Deletion",
        "peekOfCode": "df = pd.DataFrame(data)\n# print(\"Display All Data:\\n\", df)\n\"\"\"Delete single Column\"\"\"\n#del df['gender']\n#print(\"\\nGender Column Deleted:\\n\", df)\n\"\"\"Pop single column \"\"\"\n# print(\"\\nPOP City:\\n\", df.pop('city'))\n# print(\"\\nData after POP City:\\n\", df)\n##print(\"\\nTypeError: DataFrame.pop() missing 1 required positional argument: 'item' \\n\", df.pop())\n\"\"\"Delete Multiple column drop() which returns the data after deletion",
        "detail": "Column_Deletion",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Column_Insertion",
        "description": "Column_Insertion",
        "peekOfCode": "data = {\n    'name':['Aakash','Shivam','Ajay','Ajay','Rohan','Mohan',np.nan ],\n    'age':[ 24,20,22,np.nan,21,np.nan,20 ],\n    'City': ['Noida', 'Delhi', 'Mumbai', 'Pune','Goa','Patna','Lucknow']\n    }\ndf = pd.DataFrame(data)\n# print(\"Display all Data : \\n\",df)\n# df[\"Result\"] = \"pass\"\n# print(\"After Insertion of Column at the End : \\n\",df)\n# df[\"marks\"] = [95,98,69,96,56,85,33]",
        "detail": "Column_Insertion",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Column_Insertion",
        "description": "Column_Insertion",
        "peekOfCode": "df = pd.DataFrame(data)\n# print(\"Display all Data : \\n\",df)\n# df[\"Result\"] = \"pass\"\n# print(\"After Insertion of Column at the End : \\n\",df)\n# df[\"marks\"] = [95,98,69,96,56,85,33]\n# print(\"After Insertion of Array Marks-Column : \\n\",df)\n# \"\"\"insert() - It is used to insert column at particular location \"\"\"\n# hobbies = [\"Football\", \"Cricket\", \"reading\", \"singing\", \"chatting\", \"computer\", \"fighting\",]\n# df.insert(2, \"hobbies\", hobbies)\n# print(\"Insert Column at index 2 :\\n\", df)",
        "detail": "Column_Insertion",
        "documentation": {}
    },
    {
        "label": "df[\"fees\"]",
        "kind": 5,
        "importPath": "Column_Insertion",
        "description": "Column_Insertion",
        "peekOfCode": "df[\"fees\"] = df[\"age\"] * 12\nprint(\"\\n Fees Column Added:\\n\", df)",
        "detail": "Column_Insertion",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Column_Selection",
        "description": "Column_Selection",
        "peekOfCode": "data = {\n    'name':['Aakash','Shivam','Ajay','Ajay','Rohan','Mohan',np.nan ],\n    'age':[ 24,20,22,np.nan,21,np.nan,20 ],\n    'City': ['Noida', 'Delhi', 'Mumbai', 'Pune','Goa','Patna','Lucknow']\n    }\ndf = pd.DataFrame(data)\n# print(\"Display all Data : \\n\",df)\n# print(\"\\nSingle Column Data : \\n\",df[\"age\"])\n# print(\"\\n Sum of Single Column Data : \\n\",df[\"age\"].sum())\n# print(\"\\n Empty DataFrame : \\n\",df[[]])",
        "detail": "Column_Selection",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Column_Selection",
        "description": "Column_Selection",
        "peekOfCode": "df = pd.DataFrame(data)\n# print(\"Display all Data : \\n\",df)\n# print(\"\\nSingle Column Data : \\n\",df[\"age\"])\n# print(\"\\n Sum of Single Column Data : \\n\",df[\"age\"].sum())\n# print(\"\\n Empty DataFrame : \\n\",df[[]])\n# print(\"\\nMultiple Column Data : \\n\",df[[\"age\" , \"name\",\"City\"]])\n## print(\"\\n Empty DataFrame : \\n\",df[])\n# print(\"\\nSelect Row by integer Location : \\n\",df.iloc[2])\n# print(\"\\nSelect Row by Label : \\n\",df.loc[2])\nprint(\"\\nSlice Row : \\n\",df[2:5])",
        "detail": "Column_Selection",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Column_Updation",
        "description": "Column_Updation",
        "peekOfCode": "data = {\n    'name': ['aj', 'shivam', 'Rohit', 'mohit'],\n    'age': [28, 24, 35, 32],\n    'roll': [102, 102, 103, 104],\n    'marks':[11, 22, 33, 44],\n    'city':['Madhubani', 'Madhubani', 'Mithila', 'Noida'],\n    'gender':['F', 'M', 'M', 'F']\n}\ndf = pd.DataFrame(data)\nprint(\"Display All Data:\\n\", df)",
        "detail": "Column_Updation",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Column_Updation",
        "description": "Column_Updation",
        "peekOfCode": "df = pd.DataFrame(data)\nprint(\"Display All Data:\\n\", df)\n# # Update all fields of a column\n# df[\"gender\"] = \"F\"\n# print(\"\\nUpdate Gender Column:\\n\", df)\n# # Update specific field of a column\n# df.loc[df['roll'] == 102, 'marks'] = 999\n# print(\"\\nUpdate 'All' roll no.102  marks :\\n\", df)\n# Replace Values\nprint(\"\\n Replace 'All' Values:\\n\", df.replace('Madhubani', 'Delhi'))",
        "detail": "Column_Updation",
        "documentation": {}
    },
    {
        "label": "df1",
        "kind": 5,
        "importPath": "Concat",
        "description": "Concat",
        "peekOfCode": "df1 = pd.DataFrame({\n    'A': ['A0', 'A1', 'A2', 'A3'],\n    'B': ['B0', 'B1', 'B2', 'B3']\n})\ndf2 = pd.DataFrame({\n    'A': ['A4', 'A5', 'A6', 'A7'],\n    'B': ['B4', 'B5', 'B6', 'B7']\n})\ndf3 = pd.DataFrame({\n    'C': ['C0', 'C1', 'C2', 'C3'],",
        "detail": "Concat",
        "documentation": {}
    },
    {
        "label": "df2",
        "kind": 5,
        "importPath": "Concat",
        "description": "Concat",
        "peekOfCode": "df2 = pd.DataFrame({\n    'A': ['A4', 'A5', 'A6', 'A7'],\n    'B': ['B4', 'B5', 'B6', 'B7']\n})\ndf3 = pd.DataFrame({\n    'C': ['C0', 'C1', 'C2', 'C3'],\n    'D': ['D0', 'D1', 'D2', 'D3']\n})\n\"\"\"Vertical Concatenation\"\"\"\nvertical_concat = pd.concat([df1, df2])",
        "detail": "Concat",
        "documentation": {}
    },
    {
        "label": "df3",
        "kind": 5,
        "importPath": "Concat",
        "description": "Concat",
        "peekOfCode": "df3 = pd.DataFrame({\n    'C': ['C0', 'C1', 'C2', 'C3'],\n    'D': ['D0', 'D1', 'D2', 'D3']\n})\n\"\"\"Vertical Concatenation\"\"\"\nvertical_concat = pd.concat([df1, df2])\nprint(\"Vertical Concatenation:\\n\", vertical_concat)\n\"\"\"Horizontal Concatenation\"\"\"\nhorizontal_concat = pd.concat([df1, df2], axis=1)\nprint(\"\\nHorizontal Concatenation:\\n\", horizontal_concat)",
        "detail": "Concat",
        "documentation": {}
    },
    {
        "label": "vertical_concat",
        "kind": 5,
        "importPath": "Concat",
        "description": "Concat",
        "peekOfCode": "vertical_concat = pd.concat([df1, df2])\nprint(\"Vertical Concatenation:\\n\", vertical_concat)\n\"\"\"Horizontal Concatenation\"\"\"\nhorizontal_concat = pd.concat([df1, df2], axis=1)\nprint(\"\\nHorizontal Concatenation:\\n\", horizontal_concat)\n\"\"\"Concatenation with Different Columns\"\"\"\ndifferent_columns_concat = pd.concat([df1, df3], axis=1)\nprint(\"\\nConcatenation with Different Columns:\\n\", different_columns_concat)",
        "detail": "Concat",
        "documentation": {}
    },
    {
        "label": "horizontal_concat",
        "kind": 5,
        "importPath": "Concat",
        "description": "Concat",
        "peekOfCode": "horizontal_concat = pd.concat([df1, df2], axis=1)\nprint(\"\\nHorizontal Concatenation:\\n\", horizontal_concat)\n\"\"\"Concatenation with Different Columns\"\"\"\ndifferent_columns_concat = pd.concat([df1, df3], axis=1)\nprint(\"\\nConcatenation with Different Columns:\\n\", different_columns_concat)",
        "detail": "Concat",
        "documentation": {}
    },
    {
        "label": "different_columns_concat",
        "kind": 5,
        "importPath": "Concat",
        "description": "Concat",
        "peekOfCode": "different_columns_concat = pd.concat([df1, df3], axis=1)\nprint(\"\\nConcatenation with Different Columns:\\n\", different_columns_concat)",
        "detail": "Concat",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Data_Inspection",
        "description": "Data_Inspection",
        "peekOfCode": "data = {\n    'name':['Aakash','Shivam','Ajay','Ajay','Rohan','Mohan',np.nan ],\n    'age':[ 24,20,22,np.nan,21,np.nan,20 ]\n}\ndf = pd.DataFrame(data)\n# print(df)\n# print(\"Info :\\n\", df.info)\n# print(\"null Info :\\n\", df.isnull())\n# print(\"total null Info :\\n\", df.isnull().sum())\n# print(\"Statistical summary : \",df.describe())",
        "detail": "Data_Inspection",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Data_Inspection",
        "description": "Data_Inspection",
        "peekOfCode": "df = pd.DataFrame(data)\n# print(df)\n# print(\"Info :\\n\", df.info)\n# print(\"null Info :\\n\", df.isnull())\n# print(\"total null Info :\\n\", df.isnull().sum())\n# print(\"Statistical summary : \",df.describe())\n# print(\"Top 5 data : \",df.head())\n# print(\"Top 10 data : \",df.head(10))\n# print(\"Bottom 5 data : \",df.tail())\n# print(\"Bottom 10 data : \",df.tail(10))",
        "detail": "Data_Inspection",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Filter",
        "description": "Filter",
        "peekOfCode": "data = {\n    'name': ['aj', 'shivam', 'mohit', 'mohit'],\n    'age': [28, 24, 35, 32],\n    'roll': [102, 102, 103, 104],\n    'marks':[11, 22, 33, 44],\n    'city':['Madhubani', 'Madhubani', 'Mithila', 'Noida'],\n    'gender':['F', 'M', 'M', 'F']\n}\ndf = pd.DataFrame(data)\n# print(\"Display All Data:\\n\", df)",
        "detail": "Filter",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Filter",
        "description": "Filter",
        "peekOfCode": "df = pd.DataFrame(data)\n# print(\"Display All Data:\\n\", df)\n\"\"\"  isin([....])  \"\"\"\ndt1 = df['age'].isin([28, 32])\nprint(dt1)\ndt2 = df[df['age'].isin([28, 32])]\nprint(dt2)",
        "detail": "Filter",
        "documentation": {}
    },
    {
        "label": "dt1",
        "kind": 5,
        "importPath": "Filter",
        "description": "Filter",
        "peekOfCode": "dt1 = df['age'].isin([28, 32])\nprint(dt1)\ndt2 = df[df['age'].isin([28, 32])]\nprint(dt2)",
        "detail": "Filter",
        "documentation": {}
    },
    {
        "label": "dt2",
        "kind": 5,
        "importPath": "Filter",
        "description": "Filter",
        "peekOfCode": "dt2 = df[df['age'].isin([28, 32])]\nprint(dt2)",
        "detail": "Filter",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Grouping",
        "description": "Grouping",
        "peekOfCode": "data = {\n    'team': ['A', 'A', 'B', 'B', 'C', 'C'],\n    'player': ['X', 'Y', 'X', 'Y', 'X', 'Y'],\n    'points': [10, 15, 10, 20, 10, 25]\n}\ndf = pd.DataFrame(data)\n\"\"\" Display the DataFrame\"\"\"\nprint(\"Original DataFrame:\\n\", df)\n\"\"\" Group by 'team' and calculate the sum of 'points'\"\"\"\ngrouped_sum = df.groupby('team').sum()",
        "detail": "Grouping",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Grouping",
        "description": "Grouping",
        "peekOfCode": "df = pd.DataFrame(data)\n\"\"\" Display the DataFrame\"\"\"\nprint(\"Original DataFrame:\\n\", df)\n\"\"\" Group by 'team' and calculate the sum of 'points'\"\"\"\ngrouped_sum = df.groupby('team').sum()\nprint(\"\\nGrouped by Team and summed:\\n\", grouped_sum)\n\"\"\" Group by 'Team' and 'Player' and calculate the sum of 'Points'\"\"\"\ngrouped_multi = df.groupby(['team', 'player']).sum()\nprint(\"\\nGrouped by Team and Player and summed:\\n\", grouped_multi)\n\"\"\" Group by 'Team' and calculate various aggregations\"\"\"",
        "detail": "Grouping",
        "documentation": {}
    },
    {
        "label": "grouped_sum",
        "kind": 5,
        "importPath": "Grouping",
        "description": "Grouping",
        "peekOfCode": "grouped_sum = df.groupby('team').sum()\nprint(\"\\nGrouped by Team and summed:\\n\", grouped_sum)\n\"\"\" Group by 'Team' and 'Player' and calculate the sum of 'Points'\"\"\"\ngrouped_multi = df.groupby(['team', 'player']).sum()\nprint(\"\\nGrouped by Team and Player and summed:\\n\", grouped_multi)\n\"\"\" Group by 'Team' and calculate various aggregations\"\"\"\ngrouped_agg = df.groupby('team').agg({\n    'points': ['sum', 'mean', 'max']\n})\nprint(\"\\nGrouped by Team with multiple aggregations:\\n\", grouped_agg)",
        "detail": "Grouping",
        "documentation": {}
    },
    {
        "label": "grouped_multi",
        "kind": 5,
        "importPath": "Grouping",
        "description": "Grouping",
        "peekOfCode": "grouped_multi = df.groupby(['team', 'player']).sum()\nprint(\"\\nGrouped by Team and Player and summed:\\n\", grouped_multi)\n\"\"\" Group by 'Team' and calculate various aggregations\"\"\"\ngrouped_agg = df.groupby('team').agg({\n    'points': ['sum', 'mean', 'max']\n})\nprint(\"\\nGrouped by Team with multiple aggregations:\\n\", grouped_agg)\n\"\"\" Calculate the mean Points by Team and assign it to each row \"\"\"\ndf['meanpoints'] = df.groupby('team')['points'].transform('mean')\nprint(\"\\nMean Points by Team assigned to each row:\\n\", df)",
        "detail": "Grouping",
        "documentation": {}
    },
    {
        "label": "grouped_agg",
        "kind": 5,
        "importPath": "Grouping",
        "description": "Grouping",
        "peekOfCode": "grouped_agg = df.groupby('team').agg({\n    'points': ['sum', 'mean', 'max']\n})\nprint(\"\\nGrouped by Team with multiple aggregations:\\n\", grouped_agg)\n\"\"\" Calculate the mean Points by Team and assign it to each row \"\"\"\ndf['meanpoints'] = df.groupby('team')['points'].transform('mean')\nprint(\"\\nMean Points by Team assigned to each row:\\n\", df)\n\"\"\" Iterate over groups \"\"\"\nfor name, group in df.groupby('team'):\n    print(f\"\\nGroup: {name}\")",
        "detail": "Grouping",
        "documentation": {}
    },
    {
        "label": "df['meanpoints']",
        "kind": 5,
        "importPath": "Grouping",
        "description": "Grouping",
        "peekOfCode": "df['meanpoints'] = df.groupby('team')['points'].transform('mean')\nprint(\"\\nMean Points by Team assigned to each row:\\n\", df)\n\"\"\" Iterate over groups \"\"\"\nfor name, group in df.groupby('team'):\n    print(f\"\\nGroup: {name}\")\n    print(group)",
        "detail": "Grouping",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "intro",
        "description": "intro",
        "peekOfCode": "a = pd.Series([10, 20, 30, 40, 50])\nb = pd.Series([10, 20, 30, 40, 50],index=[\"a\",\"a\",\"c\",\"d\",\"e\"])\nc = pd.Series({\"a\":1,\"b\":2,\"c\":3 })\nd = pd.Series(5.0,index=[\"a\",\"a\",\"c\",\"d\",\"e\"])\nprint(d)\nprint(d.dtype)  # float64\nprint(d.index)  # Index(['a', 'b', 'c', 'd', 'e'], dtype='object')\nprint(d.values) # [5. 5. 5. 5. 5.]\nprint(d.keys)   # same as \"d\"\nprint(\"GET valueS : \",b.get(\"a\"))",
        "detail": "intro",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "intro",
        "description": "intro",
        "peekOfCode": "b = pd.Series([10, 20, 30, 40, 50],index=[\"a\",\"a\",\"c\",\"d\",\"e\"])\nc = pd.Series({\"a\":1,\"b\":2,\"c\":3 })\nd = pd.Series(5.0,index=[\"a\",\"a\",\"c\",\"d\",\"e\"])\nprint(d)\nprint(d.dtype)  # float64\nprint(d.index)  # Index(['a', 'b', 'c', 'd', 'e'], dtype='object')\nprint(d.values) # [5. 5. 5. 5. 5.]\nprint(d.keys)   # same as \"d\"\nprint(\"GET valueS : \",b.get(\"a\"))",
        "detail": "intro",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "intro",
        "description": "intro",
        "peekOfCode": "c = pd.Series({\"a\":1,\"b\":2,\"c\":3 })\nd = pd.Series(5.0,index=[\"a\",\"a\",\"c\",\"d\",\"e\"])\nprint(d)\nprint(d.dtype)  # float64\nprint(d.index)  # Index(['a', 'b', 'c', 'd', 'e'], dtype='object')\nprint(d.values) # [5. 5. 5. 5. 5.]\nprint(d.keys)   # same as \"d\"\nprint(\"GET valueS : \",b.get(\"a\"))",
        "detail": "intro",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "intro",
        "description": "intro",
        "peekOfCode": "d = pd.Series(5.0,index=[\"a\",\"a\",\"c\",\"d\",\"e\"])\nprint(d)\nprint(d.dtype)  # float64\nprint(d.index)  # Index(['a', 'b', 'c', 'd', 'e'], dtype='object')\nprint(d.values) # [5. 5. 5. 5. 5.]\nprint(d.keys)   # same as \"d\"\nprint(\"GET valueS : \",b.get(\"a\"))",
        "detail": "intro",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "intro_dataframe",
        "description": "intro_dataframe",
        "peekOfCode": "data = {'Name': ['Aakash', 'Shivam', 'Rudra', 'Sona'],\n        'Age': [24, 23, 22, 23],\n        'City': ['Noida', 'Delhi', 'Mumbai', 'Pune']}\n# Create a DataFrame\ndf = pd.DataFrame(data)\ndf = pd.DataFrame(data, index=[i for i in range(1, 5)])\n# print(df)\n# print(\"Index of df are :\\n\",df.index)\n# print(\"names of df are :\\n\",df.Name)\n# print(\"city of df are :\\n\",df.City.get(1))  \"\"\"get() take the index value \"\"\"",
        "detail": "intro_dataframe",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "intro_dataframe",
        "description": "intro_dataframe",
        "peekOfCode": "df = pd.DataFrame(data)\ndf = pd.DataFrame(data, index=[i for i in range(1, 5)])\n# print(df)\n# print(\"Index of df are :\\n\",df.index)\n# print(\"names of df are :\\n\",df.Name)\n# print(\"city of df are :\\n\",df.City.get(1))  \"\"\"get() take the index value \"\"\"\nprint(\"\\nage of df are :\\n\", df.Age)\nprint(\"\\nage[ using get('Age') ] of df are :\\n\", df.get(\"Age\"))\nprint(\"\\nage[ using get(index-key) ] of df are :\\n\", df.Age.get(1))",
        "detail": "intro_dataframe",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "intro_dataframe",
        "description": "intro_dataframe",
        "peekOfCode": "df = pd.DataFrame(data, index=[i for i in range(1, 5)])\n# print(df)\n# print(\"Index of df are :\\n\",df.index)\n# print(\"names of df are :\\n\",df.Name)\n# print(\"city of df are :\\n\",df.City.get(1))  \"\"\"get() take the index value \"\"\"\nprint(\"\\nage of df are :\\n\", df.Age)\nprint(\"\\nage[ using get('Age') ] of df are :\\n\", df.get(\"Age\"))\nprint(\"\\nage[ using get(index-key) ] of df are :\\n\", df.Age.get(1))",
        "detail": "intro_dataframe",
        "documentation": {}
    },
    {
        "label": "to_uppercase",
        "kind": 2,
        "importPath": "Map",
        "description": "Map",
        "peekOfCode": "def to_uppercase(name):\n    return name.upper()\n# Apply the to_uppercase function to the 'name' column using map()\ndf['name'] = df['name'].map(to_uppercase)\n# Display the modified DataFrame\nprint(\"\\nDataFrame after applying map() to 'name' column:\")\nprint(df)",
        "detail": "Map",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Map",
        "description": "Map",
        "peekOfCode": "data = {\n    'name': ['aj', 'shivam', 'mohit', 'mohit'],\n    'city':['Madhubani', 'Madhubani', 'Mithila', 'Noida'],\n    'age': [28, 24, 35, 32, 28, 24, np.nan, 32, 28, 24],\n}\ndf = pd.DataFrame(data)\nprint(\"Display All Data:\\n\", df)\n# Function to convert names to uppercase\ndef to_uppercase(name):\n    return name.upper()",
        "detail": "Map",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Map",
        "description": "Map",
        "peekOfCode": "df = pd.DataFrame(data)\nprint(\"Display All Data:\\n\", df)\n# Function to convert names to uppercase\ndef to_uppercase(name):\n    return name.upper()\n# Apply the to_uppercase function to the 'name' column using map()\ndf['name'] = df['name'].map(to_uppercase)\n# Display the modified DataFrame\nprint(\"\\nDataFrame after applying map() to 'name' column:\")\nprint(df)",
        "detail": "Map",
        "documentation": {}
    },
    {
        "label": "df['name']",
        "kind": 5,
        "importPath": "Map",
        "description": "Map",
        "peekOfCode": "df['name'] = df['name'].map(to_uppercase)\n# Display the modified DataFrame\nprint(\"\\nDataFrame after applying map() to 'name' column:\")\nprint(df)",
        "detail": "Map",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Missing_Data",
        "description": "Missing_Data",
        "peekOfCode": "data = {\n    'name': ['aj', 'shivam', 'mohit', 'mohit'],\n    'age': [28, 24, 35, 32],\n    'roll': [102, 102, 103, 104],\n    'marks':[11, 22, 33, 44],\n    'city':['Madhubani', 'Madhubani', 'Mithila', 'Noida'],\n    'gender':['F', 'M', 'M', 'F']\n}\ndf = pd.DataFrame(data)\n# print(\"Display All Data:\\n\", df)",
        "detail": "Missing_Data",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Missing_Data",
        "description": "Missing_Data",
        "peekOfCode": "df = pd.DataFrame(data)\n# print(\"Display All Data:\\n\", df)\n\"\"\"Boolean Mask where values are nan\"\"\"\n#print(df.isna())\n#print(df.isna().sum())\n\"\"\" Fill some Value in Missing Data \"\"\"\n#print(df.fillna(value=123))\n\"\"\" Drop missing data \"\"\"\n#print(df.dropna())\n\"\"\" Backward Filling \"\"\"",
        "detail": "Missing_Data",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Pivot_Table",
        "description": "Pivot_Table",
        "peekOfCode": "data = {\n    'Date': ['2024-01-01', '2024-01-01', '2024-01-02', '2024-01-02'],\n    'City': ['Bokaro', 'Ranchi', 'Dhanbad', 'Dumka'],\n    'Sales': [200, 150, 300, 200],\n    'Expenses': [50, 60, 70, 80]\n}\ndf = pd.DataFrame(data)\nprint(\"Original DataFrame:\\n\", df)\n# Basic Pivot Table\npivot = pd.pivot_table(df, values='Sales', index='Date',",
        "detail": "Pivot_Table",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Pivot_Table",
        "description": "Pivot_Table",
        "peekOfCode": "df = pd.DataFrame(data)\nprint(\"Original DataFrame:\\n\", df)\n# Basic Pivot Table\npivot = pd.pivot_table(df, values='Sales', index='Date',\n                       columns='City', aggfunc='sum')\nprint(\"\\nPivot Table:\\n\", pivot)\n# Multiple Aggregation Functions\npivot_multi = pd.pivot_table(df, values=['Sales', 'Expenses'], index='Date', columns='City',\n                             aggfunc={'Sales': 'sum', 'Expenses': 'mean'})\nprint(\"\\nPivot Table with Multiple Aggregations:\\n\", pivot_multi)",
        "detail": "Pivot_Table",
        "documentation": {}
    },
    {
        "label": "pivot",
        "kind": 5,
        "importPath": "Pivot_Table",
        "description": "Pivot_Table",
        "peekOfCode": "pivot = pd.pivot_table(df, values='Sales', index='Date',\n                       columns='City', aggfunc='sum')\nprint(\"\\nPivot Table:\\n\", pivot)\n# Multiple Aggregation Functions\npivot_multi = pd.pivot_table(df, values=['Sales', 'Expenses'], index='Date', columns='City',\n                             aggfunc={'Sales': 'sum', 'Expenses': 'mean'})\nprint(\"\\nPivot Table with Multiple Aggregations:\\n\", pivot_multi)\n# Adding Margins (Subtotals)\npivot_margins = pd.pivot_table(df, values='Sales', index='Date', columns='City',\n                               aggfunc='sum', margins=True)",
        "detail": "Pivot_Table",
        "documentation": {}
    },
    {
        "label": "pivot_multi",
        "kind": 5,
        "importPath": "Pivot_Table",
        "description": "Pivot_Table",
        "peekOfCode": "pivot_multi = pd.pivot_table(df, values=['Sales', 'Expenses'], index='Date', columns='City',\n                             aggfunc={'Sales': 'sum', 'Expenses': 'mean'})\nprint(\"\\nPivot Table with Multiple Aggregations:\\n\", pivot_multi)\n# Adding Margins (Subtotals)\npivot_margins = pd.pivot_table(df, values='Sales', index='Date', columns='City',\n                               aggfunc='sum', margins=True)\nprint(\"\\nPivot Table with Margins:\\n\", pivot_margins)\n# Filling Missing Values\npivot_fill = pd.pivot_table(df, values='Sales', index='Date', columns='City',\n                            aggfunc='sum', fill_value=0)",
        "detail": "Pivot_Table",
        "documentation": {}
    },
    {
        "label": "pivot_margins",
        "kind": 5,
        "importPath": "Pivot_Table",
        "description": "Pivot_Table",
        "peekOfCode": "pivot_margins = pd.pivot_table(df, values='Sales', index='Date', columns='City',\n                               aggfunc='sum', margins=True)\nprint(\"\\nPivot Table with Margins:\\n\", pivot_margins)\n# Filling Missing Values\npivot_fill = pd.pivot_table(df, values='Sales', index='Date', columns='City',\n                            aggfunc='sum', fill_value=0)\nprint(\"\\nPivot Table with Fill Value:\\n\", pivot_fill)",
        "detail": "Pivot_Table",
        "documentation": {}
    },
    {
        "label": "pivot_fill",
        "kind": 5,
        "importPath": "Pivot_Table",
        "description": "Pivot_Table",
        "peekOfCode": "pivot_fill = pd.pivot_table(df, values='Sales', index='Date', columns='City',\n                            aggfunc='sum', fill_value=0)\nprint(\"\\nPivot Table with Fill Value:\\n\", pivot_fill)",
        "detail": "Pivot_Table",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "series_ka_DF",
        "description": "series_ka_DF",
        "peekOfCode": "data = {\n    \"Department\": [\"IT\", \"Finance\", \"IT\"],\n    \"Job Title\": [\"Software Engineer\", \"Senior Software Engineer\", \"Project Manager\"],\n    \"Salary\": pd.Series([50000, 60000]),\n    \"Room No.\": pd.Series([i for i in range(20, 26, 2)]),\n}\ndf = pd.DataFrame(data)\n# print(df)\n\"\"\"index ki value match hona chachie\"\"\"\ndata2 = {",
        "detail": "series_ka_DF",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "series_ka_DF",
        "description": "series_ka_DF",
        "peekOfCode": "df = pd.DataFrame(data)\n# print(df)\n\"\"\"index ki value match hona chachie\"\"\"\ndata2 = {\n    \"Salary\": pd.Series([40000, 50000], index=[\"aa\", \"bb\"]),\n    \"Room No.\": pd.Series([i for i in range(15, 19)], index=[\"aa\", \"bb\", \"cc\", \"dd\"]),\n}\ndf2 = pd.DataFrame(data2, index=[i for i in range(1, 4)])\ndf2 = pd.DataFrame(data2)\ndf2 = pd.DataFrame(data2, index=[\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\"])",
        "detail": "series_ka_DF",
        "documentation": {}
    },
    {
        "label": "data2",
        "kind": 5,
        "importPath": "series_ka_DF",
        "description": "series_ka_DF",
        "peekOfCode": "data2 = {\n    \"Salary\": pd.Series([40000, 50000], index=[\"aa\", \"bb\"]),\n    \"Room No.\": pd.Series([i for i in range(15, 19)], index=[\"aa\", \"bb\", \"cc\", \"dd\"]),\n}\ndf2 = pd.DataFrame(data2, index=[i for i in range(1, 4)])\ndf2 = pd.DataFrame(data2)\ndf2 = pd.DataFrame(data2, index=[\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\"])\n# print(df2)\ndata3 = [\n    {\"a\": 1, \"b\": 2,\"c\": 3},",
        "detail": "series_ka_DF",
        "documentation": {}
    },
    {
        "label": "df2",
        "kind": 5,
        "importPath": "series_ka_DF",
        "description": "series_ka_DF",
        "peekOfCode": "df2 = pd.DataFrame(data2, index=[i for i in range(1, 4)])\ndf2 = pd.DataFrame(data2)\ndf2 = pd.DataFrame(data2, index=[\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\"])\n# print(df2)\ndata3 = [\n    {\"a\": 1, \"b\": 2,\"c\": 3},\n    {\"a\": 10, \"b\": 20, \"c\": 30, \"d\": 40},\n]\ndf3 = pd.DataFrame(data3)\nprint(df3)",
        "detail": "series_ka_DF",
        "documentation": {}
    },
    {
        "label": "df2",
        "kind": 5,
        "importPath": "series_ka_DF",
        "description": "series_ka_DF",
        "peekOfCode": "df2 = pd.DataFrame(data2)\ndf2 = pd.DataFrame(data2, index=[\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\"])\n# print(df2)\ndata3 = [\n    {\"a\": 1, \"b\": 2,\"c\": 3},\n    {\"a\": 10, \"b\": 20, \"c\": 30, \"d\": 40},\n]\ndf3 = pd.DataFrame(data3)\nprint(df3)",
        "detail": "series_ka_DF",
        "documentation": {}
    },
    {
        "label": "df2",
        "kind": 5,
        "importPath": "series_ka_DF",
        "description": "series_ka_DF",
        "peekOfCode": "df2 = pd.DataFrame(data2, index=[\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\"])\n# print(df2)\ndata3 = [\n    {\"a\": 1, \"b\": 2,\"c\": 3},\n    {\"a\": 10, \"b\": 20, \"c\": 30, \"d\": 40},\n]\ndf3 = pd.DataFrame(data3)\nprint(df3)",
        "detail": "series_ka_DF",
        "documentation": {}
    },
    {
        "label": "data3",
        "kind": 5,
        "importPath": "series_ka_DF",
        "description": "series_ka_DF",
        "peekOfCode": "data3 = [\n    {\"a\": 1, \"b\": 2,\"c\": 3},\n    {\"a\": 10, \"b\": 20, \"c\": 30, \"d\": 40},\n]\ndf3 = pd.DataFrame(data3)\nprint(df3)",
        "detail": "series_ka_DF",
        "documentation": {}
    },
    {
        "label": "df3",
        "kind": 5,
        "importPath": "series_ka_DF",
        "description": "series_ka_DF",
        "peekOfCode": "df3 = pd.DataFrame(data3)\nprint(df3)",
        "detail": "series_ka_DF",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Stats_Pandas",
        "description": "Stats_Pandas",
        "peekOfCode": "data = {\n    'name': ['aj', 'shivam', 'mohit', 'mohit'],\n    'age': [28, 24, 35, 32],\n    'roll': [102, 102, 103, 104],\n    'marks':[11, 22, 33, 44],\n    'city':['Madhubani', 'Madhubani', 'Mithila', 'Noida'],\n    'gender':['F', 'M', 'M', 'F']\n}\ndf = pd.DataFrame(data)\n# print(\"Display All Data:\\n\", df)",
        "detail": "Stats_Pandas",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Stats_Pandas",
        "description": "Stats_Pandas",
        "peekOfCode": "df = pd.DataFrame(data)\n# print(\"Display All Data:\\n\", df)\n\"\"\" Calculate the mean of the 'age' column\"\"\"\n#age_mean = df['age'].mean()\n#print(\"\\nMean age:\", age_mean)\n\"\"\" Calculate the mean of the 'age' column including NaN values\"\"\"\n#age_mean_with_nan = df['age'].mean(skipna=False)\n#print(\"\\nMean age including NaN:\", age_mean_with_nan)\n\"\"\" Calculate the mean of 'age' and 'marks' columns\"\"\"\n#selected_means = df[['age', 'marks']].mean()",
        "detail": "Stats_Pandas",
        "documentation": {}
    },
    {
        "label": "#age_mean",
        "kind": 5,
        "importPath": "Stats_Pandas",
        "description": "Stats_Pandas",
        "peekOfCode": "#age_mean = df['age'].mean()\n#print(\"\\nMean age:\", age_mean)\n\"\"\" Calculate the mean of the 'age' column including NaN values\"\"\"\n#age_mean_with_nan = df['age'].mean(skipna=False)\n#print(\"\\nMean age including NaN:\", age_mean_with_nan)\n\"\"\" Calculate the mean of 'age' and 'marks' columns\"\"\"\n#selected_means = df[['age', 'marks']].mean()\n#print(\"\\nAge and Marks Mean:\\n\", selected_means)\n\"\"\" Apply a single aggregation function\"\"\"\n#age_mean = df['age'].agg('mean')",
        "detail": "Stats_Pandas",
        "documentation": {}
    },
    {
        "label": "#age_mean_with_nan",
        "kind": 5,
        "importPath": "Stats_Pandas",
        "description": "Stats_Pandas",
        "peekOfCode": "#age_mean_with_nan = df['age'].mean(skipna=False)\n#print(\"\\nMean age including NaN:\", age_mean_with_nan)\n\"\"\" Calculate the mean of 'age' and 'marks' columns\"\"\"\n#selected_means = df[['age', 'marks']].mean()\n#print(\"\\nAge and Marks Mean:\\n\", selected_means)\n\"\"\" Apply a single aggregation function\"\"\"\n#age_mean = df['age'].agg('mean')\n#print(\"\\nMean age:\", age_mean)\n\"\"\" Apply multiple aggregation functions\"\"\"\n#age_stats = df['age'].agg(['mean', 'min', 'max'])",
        "detail": "Stats_Pandas",
        "documentation": {}
    },
    {
        "label": "#selected_means",
        "kind": 5,
        "importPath": "Stats_Pandas",
        "description": "Stats_Pandas",
        "peekOfCode": "#selected_means = df[['age', 'marks']].mean()\n#print(\"\\nAge and Marks Mean:\\n\", selected_means)\n\"\"\" Apply a single aggregation function\"\"\"\n#age_mean = df['age'].agg('mean')\n#print(\"\\nMean age:\", age_mean)\n\"\"\" Apply multiple aggregation functions\"\"\"\n#age_stats = df['age'].agg(['mean', 'min', 'max'])\n#print(\"\\nAge statistics:\\n\", age_stats)\n\"\"\" Apply different aggregation functions to different columns\"\"\"\ncustom_agg = df.agg({",
        "detail": "Stats_Pandas",
        "documentation": {}
    },
    {
        "label": "#age_mean",
        "kind": 5,
        "importPath": "Stats_Pandas",
        "description": "Stats_Pandas",
        "peekOfCode": "#age_mean = df['age'].agg('mean')\n#print(\"\\nMean age:\", age_mean)\n\"\"\" Apply multiple aggregation functions\"\"\"\n#age_stats = df['age'].agg(['mean', 'min', 'max'])\n#print(\"\\nAge statistics:\\n\", age_stats)\n\"\"\" Apply different aggregation functions to different columns\"\"\"\ncustom_agg = df.agg({\n    'age': ['mean', 'min', 'max'],\n    'marks': 'sum',\n    'roll': 'count'",
        "detail": "Stats_Pandas",
        "documentation": {}
    },
    {
        "label": "#age_stats",
        "kind": 5,
        "importPath": "Stats_Pandas",
        "description": "Stats_Pandas",
        "peekOfCode": "#age_stats = df['age'].agg(['mean', 'min', 'max'])\n#print(\"\\nAge statistics:\\n\", age_stats)\n\"\"\" Apply different aggregation functions to different columns\"\"\"\ncustom_agg = df.agg({\n    'age': ['mean', 'min', 'max'],\n    'marks': 'sum',\n    'roll': 'count'\n})\nprint(\"\\nCustom aggregation:\\n\", custom_agg)",
        "detail": "Stats_Pandas",
        "documentation": {}
    },
    {
        "label": "custom_agg",
        "kind": 5,
        "importPath": "Stats_Pandas",
        "description": "Stats_Pandas",
        "peekOfCode": "custom_agg = df.agg({\n    'age': ['mean', 'min', 'max'],\n    'marks': 'sum',\n    'roll': 'count'\n})\nprint(\"\\nCustom aggregation:\\n\", custom_agg)",
        "detail": "Stats_Pandas",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "String_Method_Pandas",
        "description": "String_Method_Pandas",
        "peekOfCode": "data = {\n    'name': ['aj', 'shivam', 'mohit', 'mohit'],\n    'city':['Madhubani', 'Madhubani', 'Mithila', 'Noida'],\n    'gender':['F', 'M', 'M', 'F']\n}\ndf = pd.DataFrame(data)\nprint(\"Display All Data:\\n\", df)\n\"\"\"Convert to lowercase\"\"\"\n#print(\"\\nLowercase cities:\\n\", df['city'].str.lower())\n\"\"\"Convert to Uppercase\"\"\"",
        "detail": "String_Method_Pandas",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "String_Method_Pandas",
        "description": "String_Method_Pandas",
        "peekOfCode": "df = pd.DataFrame(data)\nprint(\"Display All Data:\\n\", df)\n\"\"\"Convert to lowercase\"\"\"\n#print(\"\\nLowercase cities:\\n\", df['city'].str.lower())\n\"\"\"Convert to Uppercase\"\"\"\n#print(\"\\nUppercase cities:\\n\", df['city'].str.upper())\n\"\"\"Length of String\"\"\"\n#print(\"\\nString Length cities:\\n\", df['city'].str.len())\n\"\"\"Extract first three characters\"\"\"\n#print(\"\\nCity substrings (first 3 characters):\\n\", df['city'].str[:3])",
        "detail": "String_Method_Pandas",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Transformation",
        "description": "Transformation",
        "peekOfCode": "data = {\n    'name': ['aj', 'shivam', 'mohit', 'mohit'],\n    'age': [28, 24, 35, 32],\n    'roll': [102, 102, 103, 104],\n    'marks':[11, 22, 33, 44],\n    'city':['Madhubani', 'Madhubani', 'Mithila', 'Noida'],\n    'gender':['F', 'M', 'M', 'F']\n}\ndf = pd.DataFrame(data)\n# print(\"Display All Data:\\n\", df)",
        "detail": "Transformation",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Transformation",
        "description": "Transformation",
        "peekOfCode": "df = pd.DataFrame(data)\n# print(\"Display All Data:\\n\", df)\n\"\"\" Apply a single transformation function \"\"\"\n#age_plus_one = df['age'].transform(lambda x: x + 1)\n#print(\"\\nAge plus one:\\n\", age_plus_one)\n\"\"\" Apply a built-in transformation function to a Series \"\"\"\n#age_squared = df['age'].transform(np.sqrt)\n#print(\"\\nAge squared:\\n\", age_squared)\n\"\"\" Apply a single transformation function to multiple columns \"\"\"\n#df_transformed = df[['age', 'marks']].transform(lambda x: x * 2)",
        "detail": "Transformation",
        "documentation": {}
    },
    {
        "label": "#age_plus_one",
        "kind": 5,
        "importPath": "Transformation",
        "description": "Transformation",
        "peekOfCode": "#age_plus_one = df['age'].transform(lambda x: x + 1)\n#print(\"\\nAge plus one:\\n\", age_plus_one)\n\"\"\" Apply a built-in transformation function to a Series \"\"\"\n#age_squared = df['age'].transform(np.sqrt)\n#print(\"\\nAge squared:\\n\", age_squared)\n\"\"\" Apply a single transformation function to multiple columns \"\"\"\n#df_transformed = df[['age', 'marks']].transform(lambda x: x * 2)\n#print(\"\\nDataFrame transformed (age and marks doubled):\\n\", df_transformed)\n\"\"\" Apply different transformation functions to different columns \"\"\"\ndf_transformed_diff = df.transform({",
        "detail": "Transformation",
        "documentation": {}
    },
    {
        "label": "#age_squared",
        "kind": 5,
        "importPath": "Transformation",
        "description": "Transformation",
        "peekOfCode": "#age_squared = df['age'].transform(np.sqrt)\n#print(\"\\nAge squared:\\n\", age_squared)\n\"\"\" Apply a single transformation function to multiple columns \"\"\"\n#df_transformed = df[['age', 'marks']].transform(lambda x: x * 2)\n#print(\"\\nDataFrame transformed (age and marks doubled):\\n\", df_transformed)\n\"\"\" Apply different transformation functions to different columns \"\"\"\ndf_transformed_diff = df.transform({\n    'age': lambda x: x + 10,\n    'marks': lambda x: x - 10\n})",
        "detail": "Transformation",
        "documentation": {}
    },
    {
        "label": "#df_transformed",
        "kind": 5,
        "importPath": "Transformation",
        "description": "Transformation",
        "peekOfCode": "#df_transformed = df[['age', 'marks']].transform(lambda x: x * 2)\n#print(\"\\nDataFrame transformed (age and marks doubled):\\n\", df_transformed)\n\"\"\" Apply different transformation functions to different columns \"\"\"\ndf_transformed_diff = df.transform({\n    'age': lambda x: x + 10,\n    'marks': lambda x: x - 10\n})\nprint(\"\\nDataFrame transformed with different functions:\\n\", df_transformed_diff)",
        "detail": "Transformation",
        "documentation": {}
    },
    {
        "label": "df_transformed_diff",
        "kind": 5,
        "importPath": "Transformation",
        "description": "Transformation",
        "peekOfCode": "df_transformed_diff = df.transform({\n    'age': lambda x: x + 10,\n    'marks': lambda x: x - 10\n})\nprint(\"\\nDataFrame transformed with different functions:\\n\", df_transformed_diff)",
        "detail": "Transformation",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Value_Counts",
        "description": "Value_Counts",
        "peekOfCode": "data = {\n    'name': ['aj', 'shivam', 'mohit', 'mohit'],\n    'age': [28, 24, 35, 32],\n    'roll': [102, 102, 103, 104],\n    'marks':[11, 22, 33, 44],\n    'city':['Madhubani', 'Madhubani', 'Mithila', 'Noida'],\n    'gender':['F', 'M', 'M', 'F']\n}\ndf = pd.DataFrame(data)\nprint(\"Display All Data:\\n\", df)",
        "detail": "Value_Counts",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Value_Counts",
        "description": "Value_Counts",
        "peekOfCode": "df = pd.DataFrame(data)\nprint(\"Display All Data:\\n\", df)\n\"\"\"Use value_counts to count unique values in the 'city' column\"\"\"\ncity_counts = df['city'].value_counts()\nprint(\"\\nCity counts:\\n\", city_counts)\n\"\"\"Use value_counts to count unique values in the 'name' column\"\"\"\nname_counts = df['name'].value_counts()\nprint(\"\\nName counts:\\n\", name_counts)\n\"\"\"Use value_counts to count unique values in the 'age' column including NaN values\"\"\"\nage_counts = df['age'].value_counts(dropna=False)",
        "detail": "Value_Counts",
        "documentation": {}
    },
    {
        "label": "city_counts",
        "kind": 5,
        "importPath": "Value_Counts",
        "description": "Value_Counts",
        "peekOfCode": "city_counts = df['city'].value_counts()\nprint(\"\\nCity counts:\\n\", city_counts)\n\"\"\"Use value_counts to count unique values in the 'name' column\"\"\"\nname_counts = df['name'].value_counts()\nprint(\"\\nName counts:\\n\", name_counts)\n\"\"\"Use value_counts to count unique values in the 'age' column including NaN values\"\"\"\nage_counts = df['age'].value_counts(dropna=False)\nprint(\"\\nAge counts including NaN:\\n\", age_counts)\n\"\"\"Use value_counts with sorting by index\"\"\"\ncity_counts_sorted = df['city'].value_counts().sort_index()",
        "detail": "Value_Counts",
        "documentation": {}
    },
    {
        "label": "name_counts",
        "kind": 5,
        "importPath": "Value_Counts",
        "description": "Value_Counts",
        "peekOfCode": "name_counts = df['name'].value_counts()\nprint(\"\\nName counts:\\n\", name_counts)\n\"\"\"Use value_counts to count unique values in the 'age' column including NaN values\"\"\"\nage_counts = df['age'].value_counts(dropna=False)\nprint(\"\\nAge counts including NaN:\\n\", age_counts)\n\"\"\"Use value_counts with sorting by index\"\"\"\ncity_counts_sorted = df['city'].value_counts().sort_index()\nprint(\"\\nCity counts sorted by index:\\n\", city_counts_sorted)",
        "detail": "Value_Counts",
        "documentation": {}
    },
    {
        "label": "age_counts",
        "kind": 5,
        "importPath": "Value_Counts",
        "description": "Value_Counts",
        "peekOfCode": "age_counts = df['age'].value_counts(dropna=False)\nprint(\"\\nAge counts including NaN:\\n\", age_counts)\n\"\"\"Use value_counts with sorting by index\"\"\"\ncity_counts_sorted = df['city'].value_counts().sort_index()\nprint(\"\\nCity counts sorted by index:\\n\", city_counts_sorted)",
        "detail": "Value_Counts",
        "documentation": {}
    },
    {
        "label": "city_counts_sorted",
        "kind": 5,
        "importPath": "Value_Counts",
        "description": "Value_Counts",
        "peekOfCode": "city_counts_sorted = df['city'].value_counts().sort_index()\nprint(\"\\nCity counts sorted by index:\\n\", city_counts_sorted)",
        "detail": "Value_Counts",
        "documentation": {}
    }
]